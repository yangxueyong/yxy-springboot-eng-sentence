{"version":3,"file":"common.js","sources":["common/utils/common.js"],"sourcesContent":["export function compareTimestamp(timestamp) {\n  const currentTime = new Date().getTime();\n  const timeDiff = currentTime - timestamp;\n\n  if (timeDiff < 60000) {  \n    return '1分钟内';\n  } else if (timeDiff < 3600000) {\n    return Math.floor(timeDiff / 60000) + '分钟';\n  } else if (timeDiff < 86400000) {\n    return Math.floor(timeDiff / 3600000) + '小时';\n  } else if (timeDiff < 2592000000) {\n    return Math.floor(timeDiff / 86400000) + '天';\n  } else if (timeDiff < 7776000000) {\n    return Math.floor(timeDiff / 2592000000) + '月';\n  } else {\n    return null;\n  }\n}\n\n// 获取缓存中的用户信息\nexport function getSystemWechatUser(){\n\treturn uni.getStorageSync(\"myUser\");\n}\n\n\n// 检查缓存中的用户信息是否为空\nexport function getSystemWechatUserForward(){\n\tlet wechatUser = getSystemWechatUser();\n\tif(wechatUser == null || wechatUser.openid == null){\n\t\tuni.showToast({\n\t\t\ttitle:\"跳转登录中...\"\n\t\t});\n\t\tuni.reLaunch({\n\t\t\turl:\"/pages/my/my\"\n\t\t})\n\t}\n}\n\nexport function gotoHome(){\n\tuni.showModal({\n\t\ttitle:\"提示\",\n\t\tcontent:\"页面有误将返回首页\",\n\t\tshowCancel:false,\n\t\tsuccess: (res) => {\n\t\t\tif(res.confirm){\n\t\t\t\tuni.reLaunch({\n\t\t\t\t\turl:\"/pages/index/index\"\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t})\n}\n\n// 替换特殊字符\nexport function repstr(name){\n\treturn name.replace(\",\",\"\")\n\t.replace(\".\",\"\")\n\t.replace(\"，\",\"\")\n\t.replace(\"。\",\"\")\n\t.replace(\"！\",\"\")\n\t.replace(\"!\",\"\")\n\t.replace(\"、\",\"\")\n\t.replace(\"  \",\" \"); \n}\n\t\n// originalText 正常的字符串\n// compareText 输入的字符串\nexport function highlightedText(originalText,compareText) { \n\t// 将字符串分割为单词数组（保留空格和标点）\n\t  const tokenize = (str) => {\n\t    return str.split(/(\\s+|'\\w+|\\w+'\\w+|\\w+|[^\\w\\s])/).filter(t => t.trim().length > 0);\n\t  };\n\t\n\t  const originalTokens = tokenize(originalText.toLowerCase());\n\t  const compareTokens = tokenize(compareText.toLowerCase());\n\t  const compareOriginalTokens = tokenize(compareText); // 保留原始大小写\n\t\n\t  let result = [];\n\t  let originalIndex = 0;\n\t  let compareIndex = 0;\n\t\n\t  while (compareIndex < compareTokens.length || originalIndex < originalTokens.length) {\n\t    // 比较文本有额外token\n\t    if (originalIndex >= originalTokens.length) {\n\t      result.push(`<span class=\"diff-added\">${compareOriginalTokens[compareIndex]}</span>`);\n\t      compareIndex++;\n\t      continue;\n\t    }\n\t\n\t    // 原始文本有额外token\n\t    if (compareIndex >= compareTokens.length) {\n\t      originalIndex++;\n\t      continue;\n\t    }\n\t\n\t    // token匹配\n\t    if (compareTokens[compareIndex] === originalTokens[originalIndex]) {\n\t      result.push(compareOriginalTokens[compareIndex]);\n\t      originalIndex++;\n\t      compareIndex++;\n\t    } \n\t    // token不匹配\n\t    else {\n\t      // 检查是否是拼写错误（相似单词）\n\t      if (isTypo(compareTokens[compareIndex], originalTokens[originalIndex])) {\n\t        result.push(`<span style=\"background-color: #ff0000;font-weight: bold;color: #fff;\">${compareOriginalTokens[compareIndex]}</span>`);\n\t        originalIndex++;\n\t        compareIndex++;\n\t      }\n\t      // 检查是否是新增内容\n\t      else if (isAddedContent(compareTokens, originalTokens, compareIndex, originalIndex)) {\n\t        result.push(`<span style=\"background-color: #ffeb3b;font-weight: bold;\">${compareOriginalTokens[compareIndex]}</span>`);\n\t        compareIndex++;\n\t      }\n\t      // 默认处理为修改\n\t      else {\n\t        result.push(`<span class=\"diff-modified\">${compareOriginalTokens[compareIndex]}</span>`);\n\t        originalIndex++;\n\t        compareIndex++;\n\t      }\n\t    }\n\t  }\n\t\n\t  return result.join(' ');\n}\n\n// 判断是否是拼写错误（相似单词）\nfunction isTypo(word1, word2) {\n  if (Math.abs(word1.length - word2.length) > 1) return false;\n  \n  let diff = 0;\n  const maxLength = Math.max(word1.length, word2.length);\n  for (let i = 0; i < maxLength; i++) {\n    if (word1[i] !== word2[i]) diff++;\n    if (diff > 1) return false;\n  }\n  return true;\n}\n\n// 判断是否是新增内容\nfunction isAddedContent(compareTokens, originalTokens, compareIndex, originalIndex) {\n  // 检查接下来的几个token是否都不匹配\n  for (let i = 0; i < 3; i++) {\n    if (compareIndex + i < compareTokens.length && \n        originalIndex + i < originalTokens.length &&\n        compareTokens[compareIndex + i] === originalTokens[originalIndex + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction updateComparison() {\n  // 触发重新计算\n  highlightedResult.value;\n}\n\t\t\n"],"names":["uni"],"mappings":";;AAoBO,SAAS,sBAAqB;AACpC,SAAOA,cAAG,MAAC,eAAe,QAAQ;AACnC;AAIO,SAAS,6BAA4B;AAC3C,MAAI,aAAa;AACjB,MAAG,cAAc,QAAQ,WAAW,UAAU,MAAK;AAClDA,kBAAAA,MAAI,UAAU;AAAA,MACb,OAAM;AAAA,IACT,CAAG;AACDA,kBAAAA,MAAI,SAAS;AAAA,MACZ,KAAI;AAAA,IACP,CAAG;AAAA,EACD;AACF;AAkBO,SAAS,OAAO,MAAK;AAC3B,SAAO,KAAK,QAAQ,KAAI,EAAE,EACzB,QAAQ,KAAI,EAAE,EACd,QAAQ,KAAI,EAAE,EACd,QAAQ,KAAI,EAAE,EACd,QAAQ,KAAI,EAAE,EACd,QAAQ,KAAI,EAAE,EACd,QAAQ,KAAI,EAAE,EACd,QAAQ,MAAK,GAAG;AAClB;AAIO,SAAS,gBAAgB,cAAa,aAAa;AAEvD,QAAM,WAAW,CAAC,QAAQ;AACxB,WAAO,IAAI,MAAM,gCAAgC,EAAE,OAAO,OAAK,EAAE,KAAI,EAAG,SAAS,CAAC;AAAA,EACvF;AAEG,QAAM,iBAAiB,SAAS,aAAa,YAAa,CAAA;AAC1D,QAAM,gBAAgB,SAAS,YAAY,YAAa,CAAA;AACxD,QAAM,wBAAwB,SAAS,WAAW;AAElD,MAAI,SAAS,CAAA;AACb,MAAI,gBAAgB;AACpB,MAAI,eAAe;AAEnB,SAAO,eAAe,cAAc,UAAU,gBAAgB,eAAe,QAAQ;AAEnF,QAAI,iBAAiB,eAAe,QAAQ;AAC1C,aAAO,KAAK,4BAA4B,sBAAsB,YAAY,CAAC,SAAS;AACpF;AACA;AAAA,IACD;AAGD,QAAI,gBAAgB,cAAc,QAAQ;AACxC;AACA;AAAA,IACD;AAGD,QAAI,cAAc,YAAY,MAAM,eAAe,aAAa,GAAG;AACjE,aAAO,KAAK,sBAAsB,YAAY,CAAC;AAC/C;AACA;AAAA,IACD,OAEI;AAEH,UAAI,OAAO,cAAc,YAAY,GAAG,eAAe,aAAa,CAAC,GAAG;AACtE,eAAO,KAAK,0EAA0E,sBAAsB,YAAY,CAAC,SAAS;AAClI;AACA;AAAA,MACD,WAEQ,eAAe,eAAe,gBAAgB,cAAc,aAAa,GAAG;AACnF,eAAO,KAAK,8DAA8D,sBAAsB,YAAY,CAAC,SAAS;AACtH;AAAA,MACD,OAEI;AACH,eAAO,KAAK,+BAA+B,sBAAsB,YAAY,CAAC,SAAS;AACvF;AACA;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAED,SAAO,OAAO,KAAK,GAAG;AACzB;AAGA,SAAS,OAAO,OAAO,OAAO;AAC5B,MAAI,KAAK,IAAI,MAAM,SAAS,MAAM,MAAM,IAAI;AAAG,WAAO;AAEtD,MAAI,OAAO;AACX,QAAM,YAAY,KAAK,IAAI,MAAM,QAAQ,MAAM,MAAM;AACrD,WAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,QAAI,MAAM,CAAC,MAAM,MAAM,CAAC;AAAG;AAC3B,QAAI,OAAO;AAAG,aAAO;AAAA,EACtB;AACD,SAAO;AACT;AAGA,SAAS,eAAe,eAAe,gBAAgB,cAAc,eAAe;AAElF,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,QAAI,eAAe,IAAI,cAAc,UACjC,gBAAgB,IAAI,eAAe,UACnC,cAAc,eAAe,CAAC,MAAM,eAAe,gBAAgB,CAAC,GAAG;AACzE,aAAO;AAAA,IACR;AAAA,EACF;AACD,SAAO;AACT;;;;;"}