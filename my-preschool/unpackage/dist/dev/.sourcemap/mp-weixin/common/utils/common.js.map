{"version":3,"file":"common.js","sources":["common/utils/common.js"],"sourcesContent":["export function compareTimestamp(timestamp) {\n  const currentTime = new Date().getTime();\n  const timeDiff = currentTime - timestamp;\n\n  if (timeDiff < 60000) {  \n    return '1分钟内';\n  } else if (timeDiff < 3600000) {\n    return Math.floor(timeDiff / 60000) + '分钟';\n  } else if (timeDiff < 86400000) {\n    return Math.floor(timeDiff / 3600000) + '小时';\n  } else if (timeDiff < 2592000000) {\n    return Math.floor(timeDiff / 86400000) + '天';\n  } else if (timeDiff < 7776000000) {\n    return Math.floor(timeDiff / 2592000000) + '月';\n  } else {\n    return null;\n  }\n}\n\nexport function showHint(content){\n\tuni.showModal({\n\t\ttitle: \"温馨提示\",\n\t\tcontent: content,\n\t\tshowCancel: false\n\t});\n}\n\n// 获取缓存中的用户信息\nexport function getSystemWechatUser(){\n\treturn uni.getStorageSync(\"myUser\");\n}\n\n\n// 检查缓存中的用户信息是否为空\nexport function getSystemWechatUserForward(){\n\tlet wechatUser = getSystemWechatUser();\n\tif(wechatUser == null || wechatUser.openid == null){\n\t\tuni.showToast({\n\t\t\ttitle:\"跳转登录中...\"\n\t\t});\n\t\tuni.reLaunch({\n\t\t\turl:\"/pages/my/my\"\n\t\t})\n\t}\n}\n\nexport function gotoHome(){\n\tuni.showModal({\n\t\ttitle:\"提示\",\n\t\tcontent:\"页面有误将返回首页\",\n\t\tshowCancel:false,\n\t\tsuccess: (res) => {\n\t\t\tif(res.confirm){\n\t\t\t\tuni.reLaunch({\n\t\t\t\t\turl:\"/pages/index/index\"\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t})\n}\n\nexport const getRandomItems = (changeGridList, count) => {\n  const result = new Set();\n  // 边界条件处理\n  if (!changeGridList.length || count <= 0) {\n\t  return result;\n  }\n  if (count >= changeGridList.length) {\n\t  count = changeGridList.length;\n  }\n  \n  // 使用Set确保不重复 \n  const maxIndex = changeGridList.length; \n  \n  while (result.size < count) {\n\t  console.log(\"正在找数据：\",count);\n    const randomIndex = Math.floor(Math.random() * maxIndex);\n\t// console.log(\"随机randomIndex->\",randomIndex)\n\tresult.add(randomIndex);\n  }\n  \n  return result;\n};\n\nexport const getRandomItem = (changeGridList,processedSet) => { \n  // 使用Set确保不重复 \n  const maxIndex = changeGridList.length; \n  let randomIndex = -1;\n  do{\n\t randomIndex = Math.floor(Math.random() * maxIndex); \n\t console.log(\"正在随机颜色-->\", randomIndex);\n  }while(processedSet.has(randomIndex) && processedSet.size < changeGridList.length);\n  processedSet.add(randomIndex);\n  return randomIndex;\n};\n\nexport const getRandomItemValue = (changeGridList) => {  \n  const maxIndex = changeGridList.length; \n  let randomIndex = -1; \n  randomIndex = Math.floor(Math.random() * maxIndex);  \n  return changeGridList[randomIndex];\n};\n\n/**\n * 生成指定范围内的随机整数\n * @param {number} a - 最小值(包含)\n * @param {number} b - 最大值(包含)\n * @returns {number} 随机整数\n */\nfunction getRandomInRange(a, b) {\n  // 参数验证\n  if (typeof a !== 'number' || typeof b !== 'number' || \n      !Number.isInteger(a) || !Number.isInteger(b)) {\n    throw new Error('参数必须是整数');\n  }\n  \n  if (a < 0 || b < 0) {\n    throw new Error('参数必须是正整数');\n  }\n  \n  if (a > b) {\n    // 如果a比b大，交换两个值\n    [a, b] = [b, a];\n  }\n  \n  // 生成随机数\n  return Math.floor(Math.random() * (b - a + 1)) + a;\n}\n\n/**\n * 生成指定范围内且不等于排除值的随机整数\n * @param {number} a - 最小值(包含)\n * @param {number} b - 最大值(包含)\n * @param {number} c - 要排除的值\n * @returns {number} 随机整数\n * @throws {Error} 当参数无效或无法生成有效随机数时抛出错误\n */\nexport function getRandomInRangeExcluding(a, b, c) {\n  // 参数验证\n  if (!Number.isInteger(a) || !Number.isInteger(b) || !Number.isInteger(c)) {\n    throw new Error('所有参数都必须是整数');\n  }\n  \n  if (a < 0 || b < 0 || c < 0) {\n    throw new Error('所有参数都必须是正整数');\n  }\n  \n  if (a > b) {\n    // 如果a比b大，交换两个值\n    [a, b] = [b, a];\n  }\n  \n  // 检查排除值是否在范围内\n  if (c < a || c > b) {\n    // 如果排除值不在范围内，直接生成普通随机数\n    return Math.floor(Math.random() * (b - a + 1)) + a;\n  }\n  \n  // 计算有效数字的数量\n  const validNumbersCount = b - a; // 因为排除了一个数\n  \n  // 如果范围内只有一个数且这个数被排除了\n  if (validNumbersCount === 0) {\n    throw new Error('没有有效的数字可供选择');\n  }\n  \n  // 生成随机数\n  let randomNum;\n  do {\n    randomNum = Math.floor(Math.random() * (b - a + 1)) + a;\n  } while (randomNum === c);\n  \n  return randomNum;\n}\n\n\n// 替换特殊字符\nexport function repstr(name){\n\treturn name.replace(\",\",\"\")\n\t.replace(\".\",\"\")\n\t.replace(\"，\",\"\")\n\t.replace(\"。\",\"\")\n\t.replace(\"！\",\"\")\n\t.replace(\"!\",\"\")\n\t.replace(\"、\",\"\")\n\t.replace(\"  \",\" \"); \n}\n\t\n// originalText 正常的字符串\n// compareText 输入的字符串\nexport function highlightedText(originalText,compareText) { \n\t// 将字符串分割为单词数组（保留空格和标点）\n\t  const tokenize = (str) => {\n\t    return str.split(/(\\s+|'\\w+|\\w+'\\w+|\\w+|[^\\w\\s])/).filter(t => t.trim().length > 0);\n\t  };\n\t\n\t  const originalTokens = tokenize(originalText.toLowerCase());\n\t  const compareTokens = tokenize(compareText.toLowerCase());\n\t  const compareOriginalTokens = tokenize(compareText); // 保留原始大小写\n\t\n\t  let result = [];\n\t  let originalIndex = 0;\n\t  let compareIndex = 0;\n\t\n\t  while (compareIndex < compareTokens.length || originalIndex < originalTokens.length) {\n\t    // 比较文本有额外token\n\t    if (originalIndex >= originalTokens.length) {\n\t      result.push(`<span class=\"diff-added\">${compareOriginalTokens[compareIndex]}</span>`);\n\t      compareIndex++;\n\t      continue;\n\t    }\n\t\n\t    // 原始文本有额外token\n\t    if (compareIndex >= compareTokens.length) {\n\t      originalIndex++;\n\t      continue;\n\t    }\n\t\n\t    // token匹配\n\t    if (compareTokens[compareIndex] === originalTokens[originalIndex]) {\n\t      result.push(compareOriginalTokens[compareIndex]);\n\t      originalIndex++;\n\t      compareIndex++;\n\t    } \n\t    // token不匹配\n\t    else {\n\t      // 检查是否是拼写错误（相似单词）\n\t      if (isTypo(compareTokens[compareIndex], originalTokens[originalIndex])) {\n\t        result.push(`<span style=\"background-color: #ff0000;font-weight: bold;color: #fff;\">${compareOriginalTokens[compareIndex]}</span>`);\n\t        originalIndex++;\n\t        compareIndex++;\n\t      }\n\t      // 检查是否是新增内容\n\t      else if (isAddedContent(compareTokens, originalTokens, compareIndex, originalIndex)) {\n\t        result.push(`<span style=\"background-color: #ffeb3b;font-weight: bold;\">${compareOriginalTokens[compareIndex]}</span>`);\n\t        compareIndex++;\n\t      }\n\t      // 默认处理为修改\n\t      else {\n\t        result.push(`<span class=\"diff-modified\">${compareOriginalTokens[compareIndex]}</span>`);\n\t        originalIndex++;\n\t        compareIndex++;\n\t      }\n\t    }\n\t  }\n\t\n\t  return result.join(' ');\n}\n\n// 判断是否是拼写错误（相似单词）\nfunction isTypo(word1, word2) {\n  if (Math.abs(word1.length - word2.length) > 1) return false;\n  \n  let diff = 0;\n  const maxLength = Math.max(word1.length, word2.length);\n  for (let i = 0; i < maxLength; i++) {\n    if (word1[i] !== word2[i]) diff++;\n    if (diff > 1) return false;\n  }\n  return true;\n}\n\n// 判断是否是新增内容\nfunction isAddedContent(compareTokens, originalTokens, compareIndex, originalIndex) {\n  // 检查接下来的几个token是否都不匹配\n  for (let i = 0; i < 3; i++) {\n    if (compareIndex + i < compareTokens.length && \n        originalIndex + i < originalTokens.length &&\n        compareTokens[compareIndex + i] === originalTokens[originalIndex + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction updateComparison() {\n  // 触发重新计算\n  highlightedResult.value;\n}\n\t\t\n"],"names":["uni"],"mappings":";;AAmBO,SAAS,SAAS,SAAQ;AAChCA,gBAAAA,MAAI,UAAU;AAAA,IACb,OAAO;AAAA,IACP;AAAA,IACA,YAAY;AAAA,EACd,CAAE;AACF;AAoCY,MAAC,iBAAiB,CAAC,gBAAgB,UAAU;AACvD,QAAM,SAAS,oBAAI;AAEnB,MAAI,CAAC,eAAe,UAAU,SAAS,GAAG;AACzC,WAAO;AAAA,EACP;AACD,MAAI,SAAS,eAAe,QAAQ;AACnC,YAAQ,eAAe;AAAA,EACvB;AAGD,QAAM,WAAW,eAAe;AAEhC,SAAO,OAAO,OAAO,OAAO;AAC3BA,kBAAA,MAAA,MAAA,OAAA,gCAAY,UAAS,KAAK;AACzB,UAAM,cAAc,KAAK,MAAM,KAAK,OAAM,IAAK,QAAQ;AAE1D,WAAO,IAAI,WAAW;AAAA,EACpB;AAED,SAAO;AACT;AAEY,MAAC,gBAAgB,CAAC,gBAAe,iBAAiB;AAE5D,QAAM,WAAW,eAAe;AAChC,MAAI,cAAc;AAClB,KAAE;AACF,kBAAc,KAAK,MAAM,KAAK,OAAM,IAAK,QAAQ;AACjDA,kBAAY,MAAA,MAAA,OAAA,gCAAA,aAAa,WAAW;AAAA,EACtC,SAAS,aAAa,IAAI,WAAW,KAAK,aAAa,OAAO,eAAe;AAC3E,eAAa,IAAI,WAAW;AAC5B,SAAO;AACT;AA2CO,SAAS,0BAA0B,GAAG,GAAG,GAAG;AAEjD,MAAI,CAAC,OAAO,UAAU,CAAC,KAAK,CAAC,OAAO,UAAU,CAAC,KAAK,CAAC,OAAO,UAAU,CAAC,GAAG;AACxE,UAAM,IAAI,MAAM,YAAY;AAAA,EAC7B;AAED,MAAI,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG;AAC3B,UAAM,IAAI,MAAM,aAAa;AAAA,EAC9B;AAED,MAAI,IAAI,GAAG;AAET,KAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;AAAA,EACf;AAGD,MAAI,IAAI,KAAK,IAAI,GAAG;AAElB,WAAO,KAAK,MAAM,KAAK,OAAM,KAAM,IAAI,IAAI,EAAE,IAAI;AAAA,EAClD;AAGD,QAAM,oBAAoB,IAAI;AAG9B,MAAI,sBAAsB,GAAG;AAC3B,UAAM,IAAI,MAAM,aAAa;AAAA,EAC9B;AAGD,MAAI;AACJ,KAAG;AACD,gBAAY,KAAK,MAAM,KAAK,OAAM,KAAM,IAAI,IAAI,EAAE,IAAI;AAAA,EAC1D,SAAW,cAAc;AAEvB,SAAO;AACT;;;;;"}